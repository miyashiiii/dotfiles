xonshrc_work_name = ".xonshrc-work"
from pathlib import Path
if Path(xonshrc_work_name).is_symlink():
    source @(xonshrc_work_name)

$DOTFILES = '~/dotfiles'

$PROMPT = "{YELLOW}[{cwd}] {CYAN}{curr_branch} {GREEN}$ "
$BOTTOM_TOOLBAR = "{BACKGROUND_WHITE}{BLACK}{user}@{hostname}"

# my aliases dict
als ={}

# rc
als['sx'] = 'source ~/.xonshrc'
als['vx'] = 'vi ~/.xonshrc'
als['vv'] = 'vi ~/.vimrc'
als['vz'] = 'vi ~/.zshrc'

als['la'] = 'ls -a'
als['ll'] = 'ls -la'

# s3
als['sss'] = 'aws s3'

# ssh
def _sshub(args):
    port = 6007
    for i in range(10):
        if not $(lsof -i:@(port)):
            print("blank")
            break
        port+=1
    else:
        print("no available port in 6007 to 6016")
        return
    print(f"port forward to {port}")
    ssh -i ~/.ssh/miya-work.pem -L @(port):localhost:6006 ubuntu@@(args[0])

# als['sshub'] = 'ssh -i ~/.ssh/miya-work.pem -L 6008:localhost:6006'
als['sshub'] = _sshub
als['ssh2'] = 'ssh -i ~/.ssh/miya-work.pem -L 6009:localhost:6006'

# scp
als['scp'] = 'scp -i ~/.ssh/miya-work.pem'

# cd
als['c'] = 'cd'
als['cdf'] = f'cd {$DOTFILES}'

@events.on_chdir
def auto_ls(olddir, newdir, **kwargs):
    ls

# img
als['ic'] = 'imgcat'
als['il'] = 'imgls'

# aws
def _ec2ls_internal():
    import json
    result_json = $(aws ec2 describe-instances --query "Reservations[*].Instances[0].{Name:Tags[?Key==`Name`].Value,PublicDnsName:PublicDnsName}" --filters "Name=tag:CreatedBy,Values=Y.Miyashita")
    result = json.loads(result_json)
    instances = [(instance["Name"][0],instance["PublicDnsName"]) for instance in result]
    return instances

def _ec2ls(_):
    results = _ec2ls_internal()
    for k,v in results:
        print(f"{k:25}:{v if v else 'stopped'}")
als['ec2ls'] = _ec2ls

# git 
als['vg'] = 'vi ~/.gitconfig'
als['vgi'] = 'vi .gitignore'
als['g'] = 'git'

git_aliases = $(git alias).split("\n")
for alias_str in git_aliases:
    split =alias_str.split()
    if len(split) == 0:
        continue
    alias = split[0]
    als[f"g{alias}"] = f"git {alias}"

# ruby
als['rsv'] = 'rails server'
als['rts'] = 'rails test'
als['rcs'] = 'rails console'

# python
als['ve'] = 'python -m venv venv'
als['ave'] = 'source ./venv/bin/activate'

# other
als['jn'] = 'jupyter notebook'
als['pi'] = 'pip install'
als['lc'] = 'ls -1 | wc -l'
als['x'] = 'xonsh'

# bitwarden
def _bwpassword(name):
    password = $(bw get password @(name))
    if 'locked' in password:
        #TODO call bwunlock
        print(password)
        return
    $(echo @(password.split()[0]) | pbcopy)
als['bwpw'] = _bwpassword

def _bwunlock():
    print("Master password: [hidden]")
    result = $(bw unlock)
    if result.startswith("Invalid"):
        print(result)
        return 
    $BW_SESSION = result.split()[-1]
als['bwul']= _bwunlock

# 日報
import datetime
def _nippo():
    n = datetime.datetime.now()
    weekdays = ["月","火","水","木","金","土","日",]
    nippo_str = f"【日報】{n.year}年{n.month:02}月{n.day:02}日({weekdays[n.weekday()]}) 宮下"
    $(echo -n @(nippo_str) | pbcopy) 
    print(f"copy to clipboard: {nippo_str}")

    timediff_str = input("timediff?: ")
    _timediff(timediff_str.split())
aliases['nippo'] = _nippo

def _timediff(args):
    """
    command example: `timediff 11:35 - 19:15`
    args example: ["11:35", -, "19:15"]
    """
    break_h = 1
    time1, _,  time2 = args

    h1, m1 = time1.split(":")
    h2, m2 = time2.split(":")
    h1,h2,m1,m2 = [int(s) for s in [h1,h2,m1,m2]]

    h = h2 - h1
    if m2 >= m1:
        m = m2 - m1
    else:
        m = m2 - m1 + 60
        h -= 1 
    h -= break_h 
    print(f"{h:02}:{m:02}")

aliases['timediff'] = _timediff

# vox
xontrib load vox

# ディレクトリ名を入力すればCDできる
$AUTO_CD = True

# 各ファイルのシンボリックリンク作成
from pathlib import Path
def make_ln(filename):
    $(ln -sf $DOTFILES/@(filename) $HOME/@(filename))

ln_ignore = [
        ".git",
        ".git-ignore",
        "README.md"
        ]

for filepath in Path($DOTFILES).glob("*"):
    if filepath.name in ln_ignore:
        continue
    make_ln(filepath.name)

# シンボリックリンク作成
def _lndf(args):
    if len(args) != 1:
        print('usage: lndf filename') 
	return
    make_ln(args[0])
aliases['lndf'] = _lndf

# ライブラリの実行時import
# https://vaaaaaanquish.hatenablog.com/entry/2017/12/26/190153
# xonsh上で使うときがありそうなライブラリはlazyasdで補完時、実行時に読み込み
from xonsh.lazyasd import lazyobject
import importlib
lazy_module_dict = {
    'sys': 'sys',
    'random': 'random',
    'shutil': 'shutil',
    'pd': 'pandas',
    'np': 'numpy',
    'requests': 'requests',
    'os': 'os',
    'plt': 'matplotlib.pyplot',
        }
for k,v in lazy_module_dict.items():
    t = f"@lazyobject\ndef {k}():\n    return importlib.import_module('{v}')"
    exec(t)

import matplotlib
import matplotlib.pyplot as plt
import xontrib.mplhooks
import cv2
import random

import argparse

matplotlib.use("agg")
def _imgls(args):
    parser  = argparse.ArgumentParser()
    parser.add_argument("dir", default=".", nargs="?")
    parser.add_argument("-r", const="random", action="store_const")
    args = parser.parse_args(args)


    fig, ax = plt.subplots(3, 3, sharex='col', sharey='row')
    fig.set_size_inches(10, 10)
    d=[]
    for path in Path(args.dir).iterdir():
        if path.suffix in ('.jpg', '.jpeg', '.png'):
            d.append(path)
    if len(d)==0:
        return
    if len(d)>9:
        d = random.sample(d, 9) if args.r is not None else d[:9]
    for i, imgid in enumerate(d):
        col = i % 3
        row = i // 3
        img = cv2.imread(str(imgid))
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        ax[row, col].imshow(img)
    xontrib.mplhooks.display_figure_with_iterm2(fig)
aliases['imgls'] = _imgls

def _aliases_to_zshrc():
    zrc_alias_path = f"{$HOME}/.zsh_alias"
    ignore_keys =["sx"]
    lines = [f"alias {k}='{v}'\n" for k, v in als.items() if isinstance(v, str) and k not in ignore_keys]
    print(lines)
    with open(zrc_alias_path, mode="w") as f:
        f.writelines(lines)

aliases.update(als)           
aliases['atz'] = _aliases_to_zshrc

def _switch_show_traceback():
    $XONSH_SHOW_TRACEBACK = not($XONSH_SHOW_TRACEBACK)
    print("$XONSH_SHOW_TRACEBACK: ", $XONSH_SHOW_TRACEBACK)
aliases['sst'] = _switch_show_traceback
