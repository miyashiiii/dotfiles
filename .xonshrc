import argparse
import datetime
import importlib
import json
import random
import urllib
from pathlib import Path

import cv2

import matplotlib
import matplotlib.pyplot as plt
import tqdm
import xontrib.mplhooks
from xonsh.lazyasd import lazyobject

xonshrc_work_name = ".xonshrc-work"
if Path(xonshrc_work_name).is_symlink():
    source @(xonshrc_work_name)

$DOTFILES = '~/dotfiles'

$PROMPT = "{YELLOW}[{cwd}] {CYAN}{curr_branch} {GREEN}$ "
$BOTTOM_TOOLBAR = "{BACKGROUND_WHITE}{BLACK}{user}@{hostname}"

# my aliases dict
als ={}

# rc
als['sx'] = 'source ~/.xonshrc'
als['vx'] = 'vi ~/.xonshrc'
als['vv'] = 'vi ~/.vimrc'
als['vz'] = 'vi ~/.zshrc'

als['la'] = 'ls -a'
als['ll'] = 'ls -la'

# s3
als['sss'] = 'aws s3'

$DEFAULT_PEM = "pets.pem"
# ssh
def _sshec2(args):
    dns = args[0]
    user = input("user name? [ec2-user]" )
    if user == "":
        user = "ec2-user"
    print(user)
    pem = input(f"pem file name? [{$DEFAULT_PEM}]")
    if pem == "":
        pem = $DEFAULT_PEM
    print($DEFAULT_PEM)
    $DEFAULT_PEM = pem
     
    port = 6006
    for i in range(10):
        if not $(lsof -i:@(port)):
            print("blank")
            break
        port+=1
    else:
        print("no available port in 6006 to 6015")
        return
    print(f"port forward to {port}")


    print(f"ssh -i ~/.ssh/{pem} -L {port}:localhost:6006 {user}@{dns}")
    #print(f"ssh -i ~/.ssh/{pem) -L {port}:localhost:6006 {user}@{dns}")
    ssh -i ~/.ssh/@(pem) -L @(port):localhost:6006 @(user)@@(dns)

als['sshec2'] = _sshec2

# scp
als['scp'] = 'scp -i ~/.ssh/sip-miya.pem'

# cd
als['c'] = 'cd'
als['cdf'] = f'cd {$DOTFILES}'

@events.on_chdir
def auto_ls(olddir, newdir, **kwargs):
    ls

# img
als['ic'] = 'imgcat'
als['il'] = 'imgls'

# export
def _export(args):
    split = args[0].split("=")
    if len(split) == 2:
        key, value = split
    else:
        key = split[0]
        value = "=".join(split[1:])
    ${key} = value[1:-1]
    print(value[1:-1])
als['export'] = _export

# aws
def _ec2ls_internal():
    result_json = $(aws ec2 describe-instances --query "Reservations[*].Instances[0].{Name:Tags[?Key==`Name`].Value,PublicDnsName:PublicDnsName,InstanceId:InstanceId}" --filters "Name=tag:CreatedBy,Values=Y.Miyashita")
    result = json.loads(result_json)
    instances = [(instance["Name"][0],instance["PublicDnsName"], instance["InstanceId"]) for instance in result]
    return instances

def _ec2ls(_):
    results = _ec2ls_internal()
    for name, dns_name, id_ in results:
        print(f"{id_:21}{name:28}:{dns_name if dns_name else 'stopped'}")
als['ec2ls'] = _ec2ls

def _awsprof(args):
    if not args:
        try:
            print($AWS_DEFAULT_PROFILE)
        except KeyError as e:
            #import traceback
            #traceback.print_exc()
            print("default")
        return

    profname = args[0]
    $AWS_DEFAULT_PROFILE = profname

als['awsprof'] = _awsprof

# git 
als['vg'] = 'vi ~/.gitconfig'
als['vgi'] = 'vi .gitignore'
als['g'] = 'git'

git_aliases = $(git alias).split("\n")
for alias_str in git_aliases:
    split =alias_str.split()
    if len(split) == 0:
        continue
    alias = split[0]
    als[f"g{alias}"] = f"git {alias}"

# ruby
als['rsv'] = 'rails server'
als['rts'] = 'rails test'
als['rcs'] = 'rails console'

# python
als['ve'] = 'python -m venv venv'
als['ave'] = 'source ./venv/bin/activate'
als['vpy'] = './venv/bin/python'

# typo
als['py'] = 'python'
als['pythno'] = 'python'
als['opne'] = 'open'

# other
als['jn'] = 'jupyter notebook'
als['pi'] = 'pip install'
als['lc'] = 'ls -1 | wc -l'
als['x'] = 'xonsh'

# bitwarden
def _bwpassword(name):
    password = $(bw get password @(name))
    if 'locked' in password:
        #TODO call bwunlock
        print(password)
        return
    $(echo @(password.split()[0]) | pbcopy)
als['bwpw'] = _bwpassword

def _bwunlock():
    print("Master password: [hidden]")
    result = $(bw unlock)
    if result.startswith("Invalid"):
        print(result)
        return 
    $BW_SESSION = result.split()[-1]
als['bwul']= _bwunlock

# 日報
def _nippo():
    n = datetime.datetime.now()
    weekdays = ["月","火","水","木","金","土","日",]
    nippo_str = f"【日報】{n.year}年{n.month:02}月{n.day:02}日({weekdays[n.weekday()]}) 宮下"
    $(echo -n @(nippo_str) | pbcopy) 
    print(f"copy to clipboard: {nippo_str}")

    timediff_str = input("timediff?: ")
    _timediff(timediff_str.split())
aliases['nippo'] = _nippo

def _timediff(args):
    """
    command example: `timediff 11:35 - 19:15`
    args example: ["11:35", -, "19:15"]
    """
    break_h = 1
    time1, _,  time2 = args

    h1, m1 = time1.split(":")
    h2, m2 = time2.split(":")
    h1,h2,m1,m2 = [int(s) for s in [h1,h2,m1,m2]]

    h = h2 - h1
    if m2 >= m1:
        m = m2 - m1
    else:
        m = m2 - m1 + 60
        h -= 1 
    h -= break_h 
    print(f"{h:02}:{m:02}")

aliases['timediff'] = _timediff

# vox
xontrib load vox

# ディレクトリ名を入力すればCDできる
$AUTO_CD = True

# 各ファイルのシンボリックリンク作成
def make_ln(filename):
    $(ln -sf $DOTFILES/@(filename) $HOME/@(filename))

ln_ignore = [
        ".git",
        ".git-ignore",
        "README.md"
        ]

for filepath in Path($DOTFILES).glob("*"):
    if filepath.name in ln_ignore:
        continue
    make_ln(filepath.name)

# シンボリックリンク作成
def _lndf(args):
    if len(args) != 1:
        print('usage: lndf filename') 
	return
    make_ln(args[0])
aliases['lndf'] = _lndf

matplotlib.use("agg")
def _imgls(args):
    parser  = argparse.ArgumentParser()
    parser.add_argument("dir", default=".", nargs="?")
    parser.add_argument("-r", const="random", action="store_const")
    args = parser.parse_args(args)


    fig, ax = plt.subplots(3, 3, sharex='col', sharey='row')
    fig.set_size_inches(10, 10)
    d=[]
    for path in Path(args.dir).iterdir():
        if path.suffix in ('.jpg', '.jpeg', '.png'):
            d.append(path)
    if len(d)==0:
        return
    if len(d)>9:
        d = random.sample(d, 9) if args.r is not None else d[:9]
    for i, imgid in enumerate(d):
        col = i % 3
        row = i // 3
        img = cv2.imread(str(imgid))
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        ax[row, col].imshow(img)
    xontrib.mplhooks.display_figure_with_iterm2(fig)
aliases['imgls'] = _imgls

def _decode_url(args):
    url = args[0]
    decoded = urllib.parse.unquote(url)
    decoded = decoded.replace(" ", "%20")
    $(echo -n @(decoded) | pbcopy) 
    print(f"copy to clipboard: {decoded}")

als["decode_url"] = _decode_url

def _rand_split(args):
    dirpath, ratio = args[:2]
    dirpath = Path(dirpath)
    if not dirpath.exists():
        print("dir not found:", dirpath)
        return
    output_dir_0 = dirpath.parent/f"{dirpath.name}_0"
    output_dir_0.mkdir()
    output_dir_1 = dirpath.parent/f"{dirpath.name}_1"
    output_dir_1.mkdir()
    paths = [path for path in Path(dirpath).glob("*")]
    all_num = len(paths)
    num_0 = int(all_num*float(ratio))
    num_1 = all_num - num_0
    print(f"{num_0}:{num_1}")
    
    random.shuffle(paths)
    print("split_0:") 
    for path in tqdm(paths[:num_0]):
        shutil.copy(path, output_dir_0/path.name)
    print("split_1:") 
    for path in tqdm(paths[num_0:]):
        shutil.copy(path, output_dir_1/path.name)
    
als["randsplit"] = _rand_split

def _difftool(args):
    if not args:
        print($DIFF_TOOL)
        return
    difftool = args[0]
    valid_tools = ["charm", "studio", "code"]
    if difftool not in valid_tools:
        print(f"\"{difftool}\" is invalid. valid values: {valid_tools}")
        return
    $DIFF_TOOL = difftool

als["difftool"] = _difftool
"""
aliases in only xonsh
"""

def _aliases_to_zshrc():
    zrc_alias_path = f"{$HOME}/.zsh_alias"
    ignore_keys =["sx"]
    lines = [f"alias {k}='{v}'\n" for k, v in als.items() if isinstance(v, str) and k not in ignore_keys]
    print(lines)
    with open(zrc_alias_path, mode="w") as f:
        f.writelines(lines)

aliases.update(als)           
aliases['atz'] = _aliases_to_zshrc

def _switch_show_traceback():
    $XONSH_SHOW_TRACEBACK = not($XONSH_SHOW_TRACEBACK)
    print("$XONSH_SHOW_TRACEBACK: ", $XONSH_SHOW_TRACEBACK)
aliases['sst'] = _switch_show_traceback
